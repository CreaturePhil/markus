#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var wrench = require('wrench');

var pkg = require('../package.json');

var version = pkg.version;

// CLI

program
  .version(version)
  .usage('[options] [dir]')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

// Path

var destination_path = program.args.shift() || '.';

// App name

var app_name = path.basename(path.resolve(destination_path));

// Files

// Controllers
var authCtrl = fs.readFileSync(__dirname + '/../templates/app/controllers/authentication_controller.js', 'utf-8');
var homeCtrl = fs.readFileSync(__dirname + '/../templates/app/controllers/home_controller.js', 'utf-8');
var userCtrl = fs.readFileSync(__dirname + '/../templates/app/controllers/user_controller.js', 'utf-8');

// Models
var userModel = fs.readFileSync(__dirname + '/../templates/app/models/User.js', 'utf-8');

// Views
var signup = fs.readFileSync(__dirname + '/../templates/app/views/authentication/signup.jade', 'utf-8');
var login = fs.readFileSync(__dirname + '/../templates/app/views/authentication/login.jade', 'utf-8');
var forgotPw = fs.readFileSync(__dirname + '/../templates/app/views/authentication/forgot_password.jade', 'utf-8');
var resetPw = fs.readFileSync(__dirname + '/../templates/app/views/authentication/reset_password.jade', 'utf-8');
var flash = fs.readFileSync(__dirname + '/../templates/app/views/partials/flash.jade', 'utf-8');
var navbar = fs.readFileSync(__dirname + '/../templates/app/views/partials/navbar.jade', 'utf-8');
var deleteAcc = fs.readFileSync(__dirname + '/../templates/app/views/user/delete_account.jade', 'utf-8');
var profile = fs.readFileSync(__dirname + '/../templates/app/views/user/profile.jade', 'utf-8');
var settings = fs.readFileSync(__dirname + '/../templates/app/views/user/settings.jade', 'utf-8');
var error = fs.readFileSync(__dirname + '/../templates/app/views/error.jade', 'utf-8');
var index = fs.readFileSync(__dirname + '/../templates/app/views/index.jade', 'utf-8');
var layout = fs.readFileSync(__dirname + '/../templates/app/views/layout.jade', 'utf-8');

// Bin
var www = fs.readFileSync(__dirname + '/../templates/bin/www', 'utf-8');

// Config
var passport = fs.readFileSync(__dirname + '/../templates/config/passport.js', 'utf-8');
var routes = fs.readFileSync(__dirname + '/../templates/config/routes.js', 'utf-8');
var secrets = fs.readFileSync(__dirname + '/../templates/config/secrets.js', 'utf-8');

// Main files
var app = fs.readFileSync(__dirname + '/../templates/index.js', 'utf-8');
var gulpfile = fs.readFileSync(__dirname + '/../templates/gulpfile.js', 'utf-8');

// Generate application

(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createApplicationAt(path);
    } else {
      program.confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(destination_path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplicationAt(path) {
  console.log();
  process.on('exit', function(){
    console.log();
    console.log('   install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ npm start');
    console.log();
  });

  mkdir(path, function() {
    mkdir(path + '/app');
    mkdir(path + '/app/controllers', function() {
      write(path + '/app/controllers/authentication_controller.js', authCtrl);
      write(path + '/app/controllers/home_controller.js', homeCtrl);
      write(path + '/app/controllers/user_controller.js', userCtrl);
    });
    mkdir(path + '/app/models', function() {
      write(path + '/app/models/User.js', userModel);
    });
    mkdir(path + '/app/views', function() {
      mkdir(path + '/app/views/authentication', function() {
        write(path + '/app/views/authentication/signup.jade', signup);
        write(path + '/app/views/authentication/login.jade', login);
        write(path + '/app/views/authentication/forgot_password.jade', forgotPw);
        write(path + '/app/views/authentication/reset_password.jade', resetPw);
      });
      mkdir(path + '/app/views/partials', function() {
        write(path + '/app/views/partials/flash.jade', flash);
        write(path + '/app/views/partials/navbar.jade', navbar);
      });
      mkdir(path + '/app/views/user', function() {
        write(path + '/app/views/user/delete_account.jade', deleteAcc);
        write(path + '/app/views/user/profile.jade', profile);
        write(path + '/app/views/user/settings.jade', settings);
      });
      write(path + '/app/views/error.jade', error);
      write(path + '/app/views/index.jade', index);
      write(path + '/app/views/layout.jade', layout);
    });

    mkdir(path + '/config', function() {
      write(path + '/config/passport.js', passport); 
      write(path + '/config/routes.js', routes); 
      write(path + '/config/secrets.js', secrets); 
    });

    mkdir(path + '/public', function() {
      wrench.copyDirSyncRecursive('/../templates/public', path + '/public', {
        forceDelete: true
      });
    });

    mkdir(path + '/test', function() {
      wrench.copyDirSyncRecursive('/../templates/test', path + '/test', {
        forceDelete: true
      });
    });

    var pkg = {
      name: app_name,
      version: '0.0.0',
      scripts: { start: 'node ./bin/www' },
      dependencies: {
        'async': '^0.9.0',
        'bcrypt-nodejs': '^0.0.3',
        'body-parser': '^1.8.0',
        'compression': '^1.0.11',
        'connect-mongo': '^0.4.1',
        'cookie-parser': '^1.3.3',
        'debug': '^2.0.0',
        'express': '^4.8.8',
        'express-flash': '^0.0.2',
        'express-session': '^1.7.5',
        'express-validator': '^2.4.0',
        'jade': '^1.6.0',
        'lodash': '^2.4.1',
        'lusca': '^1.0.1',
        'method-override': '^2.2.0',
        'mongoose': '^3.8.15',
        'morgan': '^1.3.0',
        'nodemailer': '^1.2.2',
        'passport': '^0.2.1',
        'passport-local': '^1.0.0',
        'request': '^2.42.0',
        'serve-favicon': '~2.1.4'
      },
      devDependencies: {
        'chai': '^1.9.1',
        'gulp': '^3.8.8',
        'gulp-concat-css': '^0.1.4',
        'gulp-minify-css': '^0.3.10',
        'mocha': '^1.21.4',
        'supertest': '^0.13.0'
      }
    }

    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    write(path + '/gulpfile.js', gulpfile);
    write(path + '/index.js', app);
    mkdir(path + '/bin', function(){
      www = www.replace('{name}', app_name);
      write(path + '/bin/www', www, 0755);
    });
  });
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFile(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}
